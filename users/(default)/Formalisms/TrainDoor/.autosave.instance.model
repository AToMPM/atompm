{
	"csm": {
		"nodes": {
			"12": {
				"typename": {
					"type": "string",
					"value": "ClosedIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						124,
						161
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"5": {
								"src": {
									"type": "string",
									"value": "/Formalisms/TrainDoor/closed.svg"
								},
								"width": {
									"type": "double",
									"value": 48
								},
								"height": {
									"type": "double",
									"value": 48
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										10
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"9": {
								"textContent": {
									"type": "string",
									"value": "ready"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({\"textContent\": getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										64
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Closed/12.instance"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon"
			},
			"13": {
				"typename": {
					"type": "string",
					"value": "ClosedIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						545,
						178
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"5": {
								"src": {
									"type": "string",
									"value": "/Formalisms/TrainDoor/closed.svg"
								},
								"width": {
									"type": "double",
									"value": 48
								},
								"height": {
									"type": "double",
									"value": 48
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										10
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"9": {
								"textContent": {
									"type": "string",
									"value": "entering"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({\"textContent\": getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										64
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Closed/13.instance"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon"
			},
			"14": {
				"typename": {
					"type": "string",
					"value": "ClosedIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						568,
						452
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"5": {
								"src": {
									"type": "string",
									"value": "/Formalisms/TrainDoor/closed.svg"
								},
								"width": {
									"type": "double",
									"value": 48
								},
								"height": {
									"type": "double",
									"value": 48
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										10
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"9": {
								"textContent": {
									"type": "string",
									"value": "init_driving"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({\"textContent\": getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										12,
										64
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Closed/14.instance"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon"
			},
			"15": {
				"typename": {
					"type": "string",
					"value": "OpenIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						143,
						480
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"3": {
								"src": {
									"type": "string",
									"value": "/Formalisms/TrainDoor/open.svg"
								},
								"width": {
									"type": "double",
									"value": 75
								},
								"height": {
									"type": "double",
									"value": 48
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Image",
								"position": {
									"type": "list<double>",
									"value": [
										1,
										2
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"11": {
								"textContent": {
									"type": "string",
									"value": "opened"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({\"textContent\": getAttr(\"name\")})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										58
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Open/15.instance"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/OpenIcon"
			},
			"16": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TransitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						360.5,
						221.5
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"textContent": {
									"type": "string",
									"value": " [self.speed > 5]"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr(\"event\") + \" [\" + getAttr(\"condition\") + \"]\"})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-118.14030354225929,0%",
										"0;-33.71821648714851,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;3.4727935685954616"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.18404907975460122,
										"yoffset": -26.5
									}
								}
							},
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;189.7415862810426,99.81636742924371%",
										"0;7.5073020928626875,6.057457654017423%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;3.472793568595459"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Transition/16.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/12.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/16.instance": "M171,210.00000000000003L360.5,221.50000000000003",
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/16.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/13.instance": "M360.57476253125765,221.5045370401555L549.9992879748819,232.99995679003243"
					}
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink"
			},
			"17": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TransitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						364.3500000137781,
						187.49409448873143
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"textContent": {
									"type": "string",
									"value": " [self.speed > 5]"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr(\"event\") + \" [\" + getAttr(\"condition\") + \"]\"})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;119.48493149898349,0%",
										"0;31.22466075030104,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-177.745425034065"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.18404907975460122,
										"yoffset": -26.5
									}
								}
							},
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-190.50665013353142,-99.92258982289589%",
										"0;-3.4971630104054725,-3.9339602292478215%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-177.745425034065"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Transition/17.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/13.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/17.instance": "M555,195.00000000000003L364.3500000137782,187.49409448873146",
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/17.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/12.instance": "M364.42523622217846,187.4970565441803L174.00070828941654,180.00002788541013"
					}
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink"
			},
			"18": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TransitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						157.00967741769716,
						354.6499999743066
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"textContent": {
									"type": "string",
									"value": "open []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr(\"event\") + \" [\" + getAttr(\"condition\") + \"]\"})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;20.748215222689538,0%",
										"0;-90.00661507405272,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;86.30861401354873"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.18404907975460122,
										"yoffset": -26.5
									}
								}
							},
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;12.981961427969253,6.438227799796493%",
										"0;139.09150386548782,99.79253089684582%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;86.30861401354873"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Transition/18.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/12.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/18.instance": "M148,215.00000000000003L157.00967741769716,354.64999997430664",
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/18.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/OpenIcon/15.instance": "M157.0048178978182,354.5746774161845L165.9999376097926,493.99903295178626"
					}
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink"
			},
			"19": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TransitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						394.14957744896356,
						471.9856338043369
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"textContent": {
									"type": "string",
									"value": "leave []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr(\"event\") + \" [\" + getAttr(\"condition\") + \"]\"})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-113.38415394667328,0%",
										"0;-15.731942940112162,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-5.486156425004292"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.18404907975460122,
										"yoffset": -26.5
									}
								}
							},
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;183.74123403237485,99.96325206435156%",
										"0;-8.984091085259081,-2.710763124825247%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-1.5533431416296979"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Transition/19.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/OpenIcon/15.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/19.instance": "M217.00000000000006,489L394.14957744896367,471.9856338043369",
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/19.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/14.instance": "M394.07453592345325,471.9928411824932L577.9992420063314,467.00007280165187"
					}
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink"
			},
			"20": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TransitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						393.14957744896356,
						503.4869014098366
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"textContent": {
									"type": "string",
									"value": "close []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr(\"event\") + \" [\" + getAttr(\"condition\") + \"]\"})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-113.14271300816489,0%",
										"0;-16.693437382375123,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-5.004660140847416"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.18404907975460122,
										"yoffset": -26.5
									}
								}
							},
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;183.77381545300562,99.98201998786904%",
										"0;-7.486115831374605,-1.8962276090584484%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-1.0865235097525348"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Transition/20.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/OpenIcon/15.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/20.instance": "M216,519L393.14957744896367,503.4869014098366",
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/20.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/14.instance": "M393.0745359234537,503.49347284286137L576.9992420063315,500.00006637797674"
					}
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink"
			},
			"21": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TransitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						406.5404315865187,
						559.578207064587
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"textContent": {
									"type": "string",
									"value": " [self.speed > 5]"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr(\"event\") + \" [\" + getAttr(\"condition\") + \"]\"})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-153.15367900439514,0%",
										"0;-21.560100713420866,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-1.8525868819390947"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.18404907975460122,
										"yoffset": -26.5
									}
								}
							},
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;172.47093352817228,7.525871856570478%",
										"0;-58.87878087376089,-99.71640413090756%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-85.68391220046934"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Transition/21.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/OpenIcon/15.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/21.instance": "M207,527L208,566L406.5404315865187,559.578207064587",
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/21.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/14.instance": "M406.5404315865187,559.578207064587L579,554L583.0000212799273,501.00046106508887"
					}
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink"
			},
			"22": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TransitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						589.9973333340358,
						344.35000003950614
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"textContent": {
									"type": "string",
									"value": "enter []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr(\"event\") + \" [\" + getAttr(\"condition\") + \"]\"})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-20.57520083252939,0%",
										"0;82.98987949994961,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-94.13093244560788"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.18404907975460122,
										"yoffset": -26.5
									}
								}
							},
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-5.996691909198944,-1.7774969115672477%",
										"0;-112.27836714575946,-99.98420127564839%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-91.01848434771324"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Transition/22.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/14.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/22.instance": "M598.9999999999999,469L589.9973333340358,344.3500000395062",
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/22.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/13.instance": "M589.9973380747728,344.35026670596255L588.0000094758628,232.00053301728397"
					}
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink"
			},
			"23": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 2
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "TransitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						373.129374992513,
						335.5759374956055
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"7": {
								"textContent": {
									"type": "string",
									"value": "leave []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */\n({'textContent': getAttr(\"event\") + \" [\" + getAttr(\"condition\") + \"]\"})"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-115.58185438998612,0%",
										"0;-98.56916121647066,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;30.41108126712538"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.18404907975460122,
										"yoffset": -26.5
									}
								}
							},
							"267": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4 l3,-4 z"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"opacity": 1,
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;215.98733875150134,84.84349442022868%",
										"0;130.0300380806127,52.92996745289595%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;31.958148861308842"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/TrainDoor/TrainDoor/Transition/23.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/12.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/23.instance": "M166,214.00000000000003L373.129374992513,335.57593749560556",
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink/23.instance--/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/14.instance": "M373.064525780321,335.5378738275798L586.9995150458985,468.99971535302734"
					}
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor.defaultIcons/TransitionLink"
			},
			"24": {
				"typename": {
					"type": "string",
					"value": "BasicStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"r": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#20B2AA",
										"fill": "#E6E6FA",
										"fill-opacity": 0.75,
										"stroke-width": 4
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"#20B2AA\",\n\t\t    \"fill\": \"#E6E6FA\",\n\t\t    \"fill-opacity\": 0.75,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke-width'] = 4;\n\nif( getAttr('isCurrent') )\n\tstyle['fill'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"5": {
								"textContent": {
									"type": "string",
									"value": "Updating"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"6": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										32.99899850809555,
										45.99899850809561
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "5",
								"dest": "6"
							},
							{
								"src": "6",
								"dest": "4"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/BasicState/24.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon"
			},
			"25": {
				"typename": {
					"type": "string",
					"value": "OrthogonalComponentIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"18": {
								"textContent": {
									"type": "string",
									"value": "OC_1"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										203
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"20": {
								"width": {
									"type": "double",
									"value": 300
								},
								"height": {
									"type": "double",
									"value": 200
								},
								"cornerRadius": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "gray",
										"fill": "#ffffff",
										"fill-opacity": 0.01,
										"stroke-width": 2,
										"stroke-dasharray": "- "
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"21": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										77.06940657361247,
										379.3658354276615
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "18",
								"dest": "21"
							},
							{
								"src": "21",
								"dest": "20"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/OrthogonalComponent/25.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/OrthogonalComponentIcon"
			},
			"26": {
				"typename": {
					"type": "string",
					"value": "OrthogonalComponentIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"18": {
								"textContent": {
									"type": "string",
									"value": "OC_2"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										9,
										203
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"20": {
								"width": {
									"type": "double",
									"value": 300
								},
								"height": {
									"type": "double",
									"value": 200
								},
								"cornerRadius": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "gray",
										"fill": "#ffffff",
										"fill-opacity": 0.01,
										"stroke-width": 2,
										"stroke-dasharray": "- "
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"21": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										77.06940657361247,
										379.3658354276615
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "18",
								"dest": "21"
							},
							{
								"src": "21",
								"dest": "20"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/OrthogonalComponent/26.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/OrthogonalComponentIcon"
			},
			"27": {
				"typename": {
					"type": "string",
					"value": "CompositeStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 400
								},
								"height": {
									"type": "double",
									"value": 400
								},
								"cornerRadius": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "green",
										"fill": "#ffffff",
										"fill-opacity": 0.01,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"blue\",\n\t\t    \"fill\": \"#ffffff\",\n\t\t    \"fill-opacity\": 0.01,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"11": {
								"textContent": {
									"type": "string",
									"value": "root"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										11,
										404
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"12": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										77.06940657361247,
										379.3658354276615
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "11",
								"dest": "12"
							},
							{
								"src": "12",
								"dest": "10"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/CompositeState/27.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon"
			},
			"28": {
				"typename": {
					"type": "string",
					"value": "CompositeStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 400
								},
								"height": {
									"type": "double",
									"value": 400
								},
								"cornerRadius": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "green",
										"fill": "#ffffff",
										"fill-opacity": 0.01,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"blue\",\n\t\t    \"fill\": \"#ffffff\",\n\t\t    \"fill-opacity\": 0.01,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"11": {
								"textContent": {
									"type": "string",
									"value": "main"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										11,
										404
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"12": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										77.06940657361247,
										379.3658354276615
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "11",
								"dest": "12"
							},
							{
								"src": "12",
								"dest": "10"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/CompositeState/28.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon"
			},
			"29": {
				"typename": {
					"type": "string",
					"value": "ClassIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"75": {
								"textContent": {
									"type": "string",
									"value": ""
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "14px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var filenames = getAttr('attributes').map(\n            function(attr)\n            {\n                var s = '+ '+attr['name'] + ' : ' + attr['type'] + ' = ' + attr['default'];\n                return s;\n            });\n\n({'textContent': filenames.join('\\n')})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										10,
										41
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"77": {
								"textContent": {
									"type": "string",
									"value": "Train"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"font-size": "18px",
										"font-style": "normal",
										"font-weight": "bold",
										"line-height": "100%",
										"letter-spacing": "0px",
										"word-spacing": "0px",
										"fill": "#000000",
										"fill-opacity": "1",
										"stroke": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = \n{\n   \"font-size\": \"18px\",\n   \"font-style\": \"normal\",\n   \"font-weight\": \"bold\",\n   \"line-height\": \"100%\",\n   \"letter-spacing\": \"0px\",\n   \"word-spacing\": \"0px\",\n   \"fill\": \"#000000\",\n   \"fill-opacity\": \"1\",\n   \"stroke\": \"none\",\n       \"font-style\": (getAttr('abstract') ? 'italic' : 'normal')\n};\n\n({'textContent': getAttr('name'), 'style':style})\n\n\n"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */\n({'name': getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										8,
										8
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"80": {
								"segments": {
									"type": "string",
									"value": "m0,0l197,0"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "20px",
										"stroke-width": 2,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										6,
										36
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"81": {
								"width": {
									"type": "double",
									"value": 200
								},
								"height": {
									"type": "double",
									"value": 125
								},
								"cornerRadius": {
									"type": "double",
									"value": 0
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										4,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"83": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										12.5,
										27
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"84": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										53.75,
										20
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							},
							"85": {
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Contain",
								"position": {
									"type": "list<double>",
									"value": [
										68.5,
										36.5
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ffff",
										"stroke-dasharray": "",
										"stroke-opacity": 0.1,
										"stroke-width": 1
									}
								}
							}
						},
						"edges": [
							{
								"src": "81",
								"dest": "83"
							},
							{
								"src": "83",
								"dest": "75"
							},
							{
								"src": "81",
								"dest": "84"
							},
							{
								"src": "84",
								"dest": "80"
							},
							{
								"src": "81",
								"dest": "85"
							},
							{
								"src": "85",
								"dest": "77"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/Class/29.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/ClassIcon"
			},
			"30": {
				"typename": {
					"type": "string",
					"value": "CompositeStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 400
								},
								"height": {
									"type": "double",
									"value": 400
								},
								"cornerRadius": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "green",
										"fill": "#ffffff",
										"fill-opacity": 0.01,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"blue\",\n\t\t    \"fill\": \"#ffffff\",\n\t\t    \"fill-opacity\": 0.01,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"11": {
								"textContent": {
									"type": "string",
									"value": "main"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										11,
										404
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"12": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										77.06940657361247,
										379.3658354276615
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "11",
								"dest": "12"
							},
							{
								"src": "12",
								"dest": "10"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/CompositeState/30.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon"
			},
			"31": {
				"typename": {
					"type": "string",
					"value": "CompositeStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"10": {
								"width": {
									"type": "double",
									"value": 400
								},
								"height": {
									"type": "double",
									"value": 400
								},
								"cornerRadius": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "green",
										"fill": "#ffffff",
										"fill-opacity": 0.01,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"blue\",\n\t\t    \"fill\": \"#ffffff\",\n\t\t    \"fill-opacity\": 0.01,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Rectangle",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"11": {
								"textContent": {
									"type": "string",
									"value": "Updater"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										11,
										404
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"12": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										77.06940657361247,
										379.3658354276615
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "11",
								"dest": "12"
							},
							{
								"src": "12",
								"dest": "10"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/CompositeState/31.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon"
			},
			"32": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "containOCLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/containOC/32.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/28.instance--/Formalisms/SCCD/SCCD.defaultIcons/containOCLink/32.instance": "M200,200L200,200",
						"/Formalisms/SCCD/SCCD.defaultIcons/containOCLink/32.instance--/Formalisms/SCCD/SCCD.defaultIcons/OrthogonalComponentIcon/25.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/containOCLink"
			},
			"33": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "containLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/contain/33.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/27.instance--/Formalisms/SCCD/SCCD.defaultIcons/containLink/33.instance": "M200,200L200,200",
						"/Formalisms/SCCD/SCCD.defaultIcons/containLink/33.instance--/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/28.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/containLink"
			},
			"34": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "ocContainLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/ocContain/34.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/OrthogonalComponentIcon/25.instance--/Formalisms/SCCD/SCCD.defaultIcons/ocContainLink/34.instance": "M200,200L200,200",
						"/Formalisms/SCCD/SCCD.defaultIcons/ocContainLink/34.instance--/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/30.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/ocContainLink"
			},
			"35": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/35.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/30.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/35.instance": "M200,200L200,200",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/35.instance--/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/30.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"36": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "containLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/contain/36.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/31.instance--/Formalisms/SCCD/SCCD.defaultIcons/containLink/36.instance": "M200,200L200,200",
						"/Formalisms/SCCD/SCCD.defaultIcons/containLink/36.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/24.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/containLink"
			},
			"37": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "-",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "behaviourLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"92": {
								"textContent": {
									"type": "string",
									"value": "<<behaviour>>"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1,
										"arrow-start": "none",
										"arrow-end": "none"
									}
								},
								"mapper": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										0,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.34355828220858897,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;0,100%",
										"0;-4,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/behaviour/37.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/ClassIcon/29.instance--/Formalisms/SCCD/SCCD.defaultIcons/behaviourLink/37.instance": "M200,200L200,200",
						"/Formalisms/SCCD/SCCD.defaultIcons/behaviourLink/37.instance--/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/27.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/behaviourLink"
			},
			"38": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "containOCLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/containOC/38.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/28.instance--/Formalisms/SCCD/SCCD.defaultIcons/containOCLink/38.instance": "M200,200L200,200",
						"/Formalisms/SCCD/SCCD.defaultIcons/containOCLink/38.instance--/Formalisms/SCCD/SCCD.defaultIcons/OrthogonalComponentIcon/26.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/containOCLink"
			},
			"39": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": "tm(0.02s)"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										0,
										0
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;0,100%",
										"0;-4,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;0"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/39.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/24.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/39.instance": "M200,200L200,200",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/39.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/24.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			},
			"40": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "ocContainLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						200,
						200
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/ocContain/40.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/OrthogonalComponentIcon/26.instance--/Formalisms/SCCD/SCCD.defaultIcons/ocContainLink/40.instance": "M200,200L200,200",
						"/Formalisms/SCCD/SCCD.defaultIcons/ocContainLink/40.instance--/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/31.instance": "M200,200L200,200"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/ocContainLink"
			},
			"41": {
				"typename": {
					"type": "string",
					"value": "BasicStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						322.6666666666667,
						284
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"r": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#20B2AA",
										"fill": "#E6E6FA",
										"fill-opacity": 0.75,
										"stroke-width": 4
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"#20B2AA\",\n\t\t    \"fill\": \"#E6E6FA\",\n\t\t    \"fill-opacity\": 0.75,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke-width'] = 4;\n\nif( getAttr('isCurrent') )\n\tstyle['fill'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"5": {
								"textContent": {
									"type": "string",
									"value": "init_driving"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"6": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										32.99899850809555,
										45.99899850809561
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "5",
								"dest": "6"
							},
							{
								"src": "6",
								"dest": "4"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/BasicState/41.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon"
			},
			"42": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "containLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						322.6666666666667,
						284
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/contain/42.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/30.instance--/Formalisms/SCCD/SCCD.defaultIcons/containLink/42.instance": "M200,200L261.33333333333337,242",
						"/Formalisms/SCCD/SCCD.defaultIcons/containLink/42.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/41.instance": "M261.33333333333337,242L322.6666666666667,284"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/containLink"
			},
			"43": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						322.6666666666667,
						284
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/43.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/14.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/43.instance": "M568,452L445.33333333333337,368",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/43.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/41.instance": "M445.33333333333337,368L322.6666666666667,284"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"44": {
				"typename": {
					"type": "string",
					"value": "BasicStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						174.66666666666666,
						187
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"r": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#20B2AA",
										"fill": "#E6E6FA",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"#20B2AA\",\n\t\t    \"fill\": \"#E6E6FA\",\n\t\t    \"fill-opacity\": 0.75,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke-width'] = 4;\n\nif( getAttr('isCurrent') )\n\tstyle['fill'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"5": {
								"textContent": {
									"type": "string",
									"value": "ready"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"6": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										32.99899850809555,
										45.99899850809561
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "5",
								"dest": "6"
							},
							{
								"src": "6",
								"dest": "4"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/BasicState/44.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon"
			},
			"45": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "containLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						174.66666666666666,
						187
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/contain/45.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/30.instance--/Formalisms/SCCD/SCCD.defaultIcons/containLink/45.instance": "M200,200L187.33333333333331,193.5",
						"/Formalisms/SCCD/SCCD.defaultIcons/containLink/45.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/44.instance": "M187.33333333333331,193.5L174.66666666666666,187"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/containLink"
			},
			"46": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						174.66666666666666,
						187
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/46.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/12.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/46.instance": "M124,161L149.33333333333331,174",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/46.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/44.instance": "M149.33333333333331,174L174.66666666666666,187"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"47": {
				"typename": {
					"type": "string",
					"value": "BasicStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						315,
						192.66666666666666
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"r": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#20B2AA",
										"fill": "#E6E6FA",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"#20B2AA\",\n\t\t    \"fill\": \"#E6E6FA\",\n\t\t    \"fill-opacity\": 0.75,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke-width'] = 4;\n\nif( getAttr('isCurrent') )\n\tstyle['fill'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"5": {
								"textContent": {
									"type": "string",
									"value": "entering"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"6": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										32.99899850809555,
										45.99899850809561
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "5",
								"dest": "6"
							},
							{
								"src": "6",
								"dest": "4"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/BasicState/47.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon"
			},
			"48": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "containLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						315,
						192.66666666666666
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/contain/48.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/30.instance--/Formalisms/SCCD/SCCD.defaultIcons/containLink/48.instance": "M200,200L257.5,196.33333333333331",
						"/Formalisms/SCCD/SCCD.defaultIcons/containLink/48.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/47.instance": "M257.5,196.33333333333331L315,192.66666666666666"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/containLink"
			},
			"49": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						315,
						192.66666666666666
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/49.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/ClosedIcon/13.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/49.instance": "M545,178L430,185.33333333333331",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/49.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/47.instance": "M430,185.33333333333331L315,192.66666666666666"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"50": {
				"typename": {
					"type": "string",
					"value": "BasicStateIcon"
				},
				"position": {
					"type": "list<double>",
					"value": [
						181,
						293.3333333333333
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": ""
				},
				"parser": {
					"type": "code",
					"value": ""
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"4": {
								"r": {
									"type": "double",
									"value": 20
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#20B2AA",
										"fill": "#E6E6FA",
										"fill-opacity": 0.75,
										"stroke-width": 2
									}
								},
								"mapper": {
									"type": "code",
									"value": "var style = { \"stroke\": \"#20B2AA\",\n\t\t    \"fill\": \"#E6E6FA\",\n\t\t    \"fill-opacity\": 0.75,\n   \t\t    \"stroke-width\": 2};\n\nif( getAttr('isStart') )\n\tstyle['stroke-width'] = 4;\n\nif( getAttr('isCurrent') )\n\tstyle['fill'] = 'green';\n\n({'style' : style})"
								},
								"parser": {
									"type": "code",
									"value": ""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Circle",
								"position": {
									"type": "list<double>",
									"value": [
										3,
										3
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"5": {
								"textContent": {
									"type": "string",
									"value": "opened"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('name')})"
								},
								"parser": {
									"type": "code",
									"value": "({'name':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										2,
										44
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								}
							},
							"6": {
								"distance": {
									"type": "double",
									"value": 10
								},
								"alignment": {
									"type": "ENUM(\"right\",\"left\",\"center\")",
									"value": "\"center\""
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Below",
								"position": {
									"type": "list<double>",
									"value": [
										32.99899850809555,
										45.99899850809561
									]
								},
								"orientation": {
									"type": "double",
									"value": 0
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"link-style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#00ff00",
										"stroke-dasharray": "",
										"stroke-opacity": 1,
										"arrow-start": "none",
										"arrow-end": "classic-wide-long"
									}
								}
							}
						},
						"edges": [
							{
								"src": "5",
								"dest": "6"
							},
							{
								"src": "6",
								"dest": "4"
							}
						]
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/BasicState/50.instance"
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon"
			},
			"51": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#ffff00",
						"stroke-dasharray": "",
						"stroke-opacity": 0.75,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "containLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						181,
						293.3333333333333
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/contain/51.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/CompositeStateIcon/30.instance--/Formalisms/SCCD/SCCD.defaultIcons/containLink/51.instance": "M200,200L190.5,246.66666666666666",
						"/Formalisms/SCCD/SCCD.defaultIcons/containLink/51.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/50.instance": "M190.5,246.66666666666666L181,293.3333333333333"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/containLink"
			},
			"52": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#a000ff",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "GenericLinkLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						181,
						293.3333333333333
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/GenericGraph/GenericGraph/GenericLink/52.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/TrainDoor/TrainDoor.defaultIcons/OpenIcon/15.instance--/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/52.instance": "M143,480L162,386.66666666666663",
						"/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink/52.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/50.instance": "M162,386.66666666666663L181,293.3333333333333"
					}
				},
				"$type": "/Formalisms/GenericGraph/GenericGraph.defaultIcons/GenericLinkLink"
			},
			"53": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						425.47580952390985,
						275.3833333389771
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": "enter []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-122.6848550051302,0%",
										"0;-30.907036304008642,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-94.79825103687205"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-114.46179117617078,-8.364742518430809%",
										"0;-82.38207697157318,-99.64954130652261%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-94.79825103687212"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/53.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/41.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/53.instance": "M322.6666666666667,284L318.83333333333337,238.33333333333331",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/53.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/47.instance": "M318.83333333333337,238.33333333333331L315,192.66666666666666"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			},
			"54": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						162.19185867871866,
						279.473809520139
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": "open []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;31.782019339604034,0%",
										"0;-45.833152691656835,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;86.59142557751481"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;22.801065087017122,5.945576140202224%",
										"0;13.62170076758622,99.82309414339478%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;86.59142557751478"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/54.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/44.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/54.instance": "M174.66666666666666,187L177.83333333333331,240.16666666666666",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/54.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/50.instance": "M177.83333333333331,240.16666666666666L181,293.3333333333333"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			},
			"55": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						301.64041582604244,
						370.0219382966433
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": "close []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-58.279315349979356,0%",
										"0;-97.33287121821729,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-3.7693334881501603"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;20.76329149640651,99.78367972547099%",
										"0;-90.01328548566215,-6.5739836054427405%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-3.769333488150115"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/55.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/50.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/55.instance": "M181,293.3333333333333L251.83333333333334,288.66666666666663",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/55.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/41.instance": "M251.83333333333334,288.66666666666663L322.6666666666667,284"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			},
			"56": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						303.5533949885503,
						378.0349819616077
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": " [self.speed > 5]"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-60.192294512487194,0%",
										"0;-105.34591488318165,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-3.7693334881501603"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;18.85031233389867,99.78367972547099%",
										"0;-98.02632915062651,-6.5739836054427405%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-3.769333488150115"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/56.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/50.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/56.instance": "M181,293.3333333333333L251.83333333333334,288.66666666666663",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/56.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/41.instance": "M251.83333333333334,288.66666666666663L322.6666666666667,284"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			},
			"57": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						287.5261904781588,
						183.68963254600928
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": " [self.speed > 5]"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-36.040589488703034,0%",
										"0;22.92576621517523,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-177.6876499547952"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-113.02091247910377,-99.91857215367466%",
										"0;7.3071103401377115,-4.03471669029085%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-177.6876499547952"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/57.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/47.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/57.instance": "M315,192.66666666666666L244.83333333333331,189.83333333333331",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/57.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/44.instance": "M244.83333333333331,189.83333333333331L174.66666666666666,187"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			},
			"58": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						294.25657737988286,
						270.0822767850865
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": "leave []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-44.263019347822876,0%",
										"0;-53.440693539165835,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;33.24105023326144"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;30.602739656828987,83.63717906357809%",
										"0;10.572236052370386,54.81625925112888%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;33.241050233261454"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/58.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/44.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/58.instance": "M174.66666666666666,187L248.66666666666669,235.5",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/58.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/41.instance": "M248.66666666666669,235.5L322.6666666666667,284"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			},
			"59": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						286.9761904761905,
						188.54761904761904
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": " [self.speed > 5]"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-48.7951247989796,0%",
										"0;-15.496351142136916,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;2.3123500452048"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;28.185198191421136,99.91857215367466%",
										"0;0.1223047329006306,4.034716690290914%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;2.3123500452048225"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/59.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/44.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/59.instance": "M174.66666666666666,187L244.83333333333331,189.83333333333331",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/59.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/47.instance": "M244.83333333333331,189.83333333333331L315,192.66666666666666"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			},
			"60": {
				"link-style": {
					"type": "map<string,string>",
					"value": {
						"stroke": "#000000",
						"stroke-dasharray": "",
						"stroke-opacity": 1,
						"stroke-width": 1
					}
				},
				"arrowHead": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "custom"
				},
				"arrowTail": {
					"type": "ENUM(circle-black,circle-black-large,circle-white,circle-white-large,diamond-black,diamond-black-large,diamond-white,diamond-white-large,triangle-black,triangle-black-large,triangle-white,triangle-white-large,arrow-black,arrow-black-large,arrow-empty,arrow-empty-large,custom)",
					"value": "arrow-black"
				},
				"typename": {
					"type": "string",
					"value": "transitionLink"
				},
				"position": {
					"type": "list<double>",
					"value": [
						301.78327296889955,
						365.5217572101434
					]
				},
				"orientation": {
					"type": "double",
					"value": 0
				},
				"scale": {
					"type": "list<double>",
					"value": [
						1,
						1
					]
				},
				"mapper": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,csattr:val,...} */"
				},
				"parser": {
					"type": "code",
					"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
				},
				"$contents": {
					"type": "map<string,*>",
					"value": {
						"nodes": {
							"16": {
								"textContent": {
									"type": "string",
									"value": "leave []"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"stroke-dasharray": "",
										"fill": "#ffffff",
										"fill-opacity": 0.75,
										"font-size": "13px",
										"stroke-width": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": "({'textContent':getAttr('display')})"
								},
								"parser": {
									"type": "code",
									"value": "({'display':getAttr('textContent')})"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Text",
								"position": {
									"type": "list<double>",
									"value": [
										"0;-58.42217249283647,0%",
										"0;-92.83269013171736,0%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-3.7693334881501603"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 0.44785276073619634,
										"yoffset": -16.5
									}
								}
							},
							"281": {
								"segments": {
									"type": "string",
									"value": "m0,0 l10,4 l-10,4"
								},
								"style": {
									"type": "map<string,string>",
									"value": {
										"stroke": "#000000",
										"fill": "#000000",
										"fill-opacity": 0,
										"stroke-width": 1,
										"opacity": 1
									}
								},
								"mapper": {
									"type": "code",
									"value": ""
								},
								"parser": {
									"type": "code",
									"value": "/* specify code that evaluates to an associative array of the form {...,attr:val,...} */"
								},
								"$type": "/Formalisms/__LanguageSyntax__/ConcreteSyntax/ConcreteSyntax/Path",
								"position": {
									"type": "list<double>",
									"value": [
										"0;20.6204343535494,99.78367972547099%",
										"0;-85.51310439916222,-6.5739836054427405%"
									]
								},
								"orientation": {
									"type": "double",
									"value": "0;-3.769333488150115"
								},
								"scale": {
									"type": "list<double>",
									"value": [
										1,
										1
									]
								},
								"$linkDecoratorInfo": {
									"type": "map<string,double>",
									"value": {
										"xratio": 1,
										"yoffset": -4
									}
								}
							}
						},
						"edges": []
					}
				},
				"$asuri": {
					"type": "string",
					"value": "/Formalisms/SCCD/SCCD/transition/60.instance"
				},
				"$segments": {
					"type": "map<string,list<string>>",
					"value": {
						"/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/50.instance--/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/60.instance": "M181,293.3333333333333L251.83333333333334,288.66666666666663",
						"/Formalisms/SCCD/SCCD.defaultIcons/transitionLink/60.instance--/Formalisms/SCCD/SCCD.defaultIcons/BasicStateIcon/41.instance": "M251.83333333333334,288.66666666666663L322.6666666666667,284"
					}
				},
				"$type": "/Formalisms/SCCD/SCCD.defaultIcons/transitionLink"
			}
		},
		"edges": [],
		"metamodels": [
			"/Formalisms/TrainDoor/TrainDoor.defaultIcons",
			"/Formalisms/GenericGraph/GenericGraph.defaultIcons",
			"/Formalisms/SCCD/SCCD.defaultIcons"
		]
	},
	"asm": {
		"nodes": {
			"12": {
				"name": {
					"type": "string",
					"value": "ready"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Closed"
			},
			"13": {
				"name": {
					"type": "string",
					"value": "entering"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Closed"
			},
			"14": {
				"name": {
					"type": "string",
					"value": "init_driving"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Closed"
			},
			"15": {
				"name": {
					"type": "string",
					"value": "opened"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Open"
			},
			"16": {
				"condition": {
					"type": "string",
					"value": "self.speed > 5"
				},
				"event": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Transition"
			},
			"17": {
				"condition": {
					"type": "string",
					"value": "self.speed > 5"
				},
				"event": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Transition"
			},
			"18": {
				"condition": {
					"type": "string",
					"value": ""
				},
				"event": {
					"type": "string",
					"value": "open"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Transition"
			},
			"19": {
				"condition": {
					"type": "string",
					"value": ""
				},
				"event": {
					"type": "string",
					"value": "leave"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Transition"
			},
			"20": {
				"condition": {
					"type": "string",
					"value": ""
				},
				"event": {
					"type": "string",
					"value": "close"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Transition"
			},
			"21": {
				"condition": {
					"type": "string",
					"value": "self.speed > 5"
				},
				"event": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Transition"
			},
			"22": {
				"condition": {
					"type": "string",
					"value": ""
				},
				"event": {
					"type": "string",
					"value": "enter"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Transition"
			},
			"23": {
				"condition": {
					"type": "string",
					"value": ""
				},
				"event": {
					"type": "string",
					"value": "leave"
				},
				"$type": "/Formalisms/TrainDoor/TrainDoor/Transition"
			},
			"24": {
				"name": {
					"type": "string",
					"value": "Updating"
				},
				"entryAction": {
					"type": "code",
					"value": ""
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": true
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/BasicState"
			},
			"25": {
				"name": {
					"type": "string",
					"value": "OC_1"
				},
				"$type": "/Formalisms/SCCD/SCCD/OrthogonalComponent"
			},
			"26": {
				"name": {
					"type": "string",
					"value": "OC_2"
				},
				"$type": "/Formalisms/SCCD/SCCD/OrthogonalComponent"
			},
			"27": {
				"name": {
					"type": "string",
					"value": "root"
				},
				"entryAction": {
					"type": "code",
					"value": ""
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": true
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/CompositeState"
			},
			"28": {
				"name": {
					"type": "string",
					"value": "main"
				},
				"entryAction": {
					"type": "code",
					"value": ""
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": true
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/CompositeState"
			},
			"29": {
				"name": {
					"type": "string",
					"value": "Train"
				},
				"attributes": {
					"type": "list<$ATTRIBUTE>",
					"value": []
				},
				"cardinalities": {
					"type": "list<$CARDINALITY>",
					"value": []
				},
				"abstract": {
					"type": "boolean",
					"value": false
				},
				"methods": {
					"type": "list<$METHOD>",
					"value": [
						{
							"returntype": "",
							"body": "self.root, self.acceleration, self.speed, _ = root, 0.0, 0.0, root.trainIs(self)",
							"args": [
								{
									"type": "",
									"name": "root"
								}
							],
							"name": "Train"
						},
						{
							"returntype": "",
							"body": "self.root.updateState()",
							"args": [
								{
									"type": "",
									"name": ""
								}
							],
							"name": "updateState"
						},
						{
							"returntype": "",
							"body": "self.root.openDoors()",
							"args": [
								{
									"type": "",
									"name": ""
								}
							],
							"name": "openDoors"
						},
						{
							"returntype": "",
							"body": "self.root.closeDoors()",
							"args": [
								{
									"type": "",
									"name": ""
								}
							],
							"name": "closeDoors"
						},
						{
							"returntype": "",
							"body": "self.root.notify(message, colour)",
							"args": [
								{
									"type": "",
									"name": "message"
								},
								{
									"type": "",
									"name": "colour"
								}
							],
							"name": "notify"
						}
					]
				},
				"external": {
					"type": "boolean",
					"value": false
				},
				"$type": "/Formalisms/SCCD/SCCD/Class"
			},
			"30": {
				"name": {
					"type": "string",
					"value": "main"
				},
				"entryAction": {
					"type": "code",
					"value": ""
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": true
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/CompositeState"
			},
			"31": {
				"name": {
					"type": "string",
					"value": "Updater"
				},
				"entryAction": {
					"type": "code",
					"value": ""
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": true
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/CompositeState"
			},
			"32": {
				"$type": "/Formalisms/SCCD/SCCD/containOC"
			},
			"33": {
				"$type": "/Formalisms/SCCD/SCCD/contain"
			},
			"34": {
				"$type": "/Formalisms/SCCD/SCCD/ocContain"
			},
			"35": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"36": {
				"$type": "/Formalisms/SCCD/SCCD/contain"
			},
			"37": {
				"$type": "/Formalisms/SCCD/SCCD/behaviour"
			},
			"38": {
				"$type": "/Formalisms/SCCD/SCCD/containOC"
			},
			"39": {
				"event": {
					"type": "string",
					"value": ""
				},
				"guard": {
					"type": "code",
					"value": ""
				},
				"action": {
					"type": "code",
					"value": "self.updateState()"
				},
				"display": {
					"type": "string",
					"value": "tm(0.02s)"
				},
				"after": {
					"type": "code",
					"value": "0.02"
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			},
			"40": {
				"$type": "/Formalisms/SCCD/SCCD/ocContain"
			},
			"41": {
				"name": {
					"type": "string",
					"value": "init_driving"
				},
				"entryAction": {
					"type": "code",
					"value": "self.closeDoors()"
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": true
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/BasicState"
			},
			"42": {
				"$type": "/Formalisms/SCCD/SCCD/contain"
			},
			"43": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"44": {
				"name": {
					"type": "string",
					"value": "ready"
				},
				"entryAction": {
					"type": "code",
					"value": "self.closeDoors()"
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": false
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/BasicState"
			},
			"45": {
				"$type": "/Formalisms/SCCD/SCCD/contain"
			},
			"46": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"47": {
				"name": {
					"type": "string",
					"value": "entering"
				},
				"entryAction": {
					"type": "code",
					"value": "self.closeDoors()"
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": false
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/BasicState"
			},
			"48": {
				"$type": "/Formalisms/SCCD/SCCD/contain"
			},
			"49": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"50": {
				"name": {
					"type": "string",
					"value": "opened"
				},
				"entryAction": {
					"type": "code",
					"value": "self.openDoors()"
				},
				"exitAction": {
					"type": "code",
					"value": ""
				},
				"isStart": {
					"type": "boolean",
					"value": false
				},
				"isCurrent": {
					"type": "boolean",
					"value": false
				},
				"option": {
					"type": "ENUM(ITF, OTF, RTO)",
					"value": "ITF"
				},
				"raiseEntry": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"raiseExit": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"$type": "/Formalisms/SCCD/SCCD/BasicState"
			},
			"51": {
				"$type": "/Formalisms/SCCD/SCCD/contain"
			},
			"52": {
				"$type": "/Formalisms/GenericGraph/GenericGraph/GenericLink"
			},
			"53": {
				"event": {
					"type": "string",
					"value": "enter"
				},
				"guard": {
					"type": "code",
					"value": ""
				},
				"action": {
					"type": "code",
					"value": ""
				},
				"display": {
					"type": "string",
					"value": "enter []"
				},
				"after": {
					"type": "code",
					"value": ""
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			},
			"54": {
				"event": {
					"type": "string",
					"value": "open"
				},
				"guard": {
					"type": "code",
					"value": ""
				},
				"action": {
					"type": "code",
					"value": ""
				},
				"display": {
					"type": "string",
					"value": "open []"
				},
				"after": {
					"type": "code",
					"value": ""
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			},
			"55": {
				"event": {
					"type": "string",
					"value": "close"
				},
				"guard": {
					"type": "code",
					"value": ""
				},
				"action": {
					"type": "code",
					"value": ""
				},
				"display": {
					"type": "string",
					"value": "close []"
				},
				"after": {
					"type": "code",
					"value": ""
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			},
			"56": {
				"event": {
					"type": "string",
					"value": ""
				},
				"guard": {
					"type": "code",
					"value": "self.speed > 5"
				},
				"action": {
					"type": "code",
					"value": ""
				},
				"display": {
					"type": "string",
					"value": " [self.speed > 5]"
				},
				"after": {
					"type": "code",
					"value": ""
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			},
			"57": {
				"event": {
					"type": "string",
					"value": ""
				},
				"guard": {
					"type": "code",
					"value": "self.speed > 5"
				},
				"action": {
					"type": "code",
					"value": ""
				},
				"display": {
					"type": "string",
					"value": " [self.speed > 5]"
				},
				"after": {
					"type": "code",
					"value": ""
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			},
			"58": {
				"event": {
					"type": "string",
					"value": "leave"
				},
				"guard": {
					"type": "code",
					"value": ""
				},
				"action": {
					"type": "code",
					"value": ""
				},
				"display": {
					"type": "string",
					"value": "leave []"
				},
				"after": {
					"type": "code",
					"value": ""
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			},
			"59": {
				"event": {
					"type": "string",
					"value": ""
				},
				"guard": {
					"type": "code",
					"value": "self.speed > 5"
				},
				"action": {
					"type": "code",
					"value": ""
				},
				"display": {
					"type": "string",
					"value": " [self.speed > 5]"
				},
				"after": {
					"type": "code",
					"value": ""
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			},
			"60": {
				"event": {
					"type": "string",
					"value": "leave"
				},
				"guard": {
					"type": "code",
					"value": ""
				},
				"action": {
					"type": "code",
					"value": ""
				},
				"display": {
					"type": "string",
					"value": "leave []"
				},
				"after": {
					"type": "code",
					"value": ""
				},
				"raise": {
					"type": "list<map<[event,scope,arguments],[string,string,list<string>]>>",
					"value": []
				},
				"parameters": {
					"type": "list<string>",
					"value": []
				},
				"port": {
					"type": "string",
					"value": ""
				},
				"$type": "/Formalisms/SCCD/SCCD/transition"
			}
		},
		"edges": [
			{
				"src": "12",
				"dest": "16"
			},
			{
				"src": "16",
				"dest": "13"
			},
			{
				"src": "13",
				"dest": "17"
			},
			{
				"src": "17",
				"dest": "12"
			},
			{
				"src": "12",
				"dest": "18"
			},
			{
				"src": "18",
				"dest": "15"
			},
			{
				"src": "15",
				"dest": "19"
			},
			{
				"src": "19",
				"dest": "14"
			},
			{
				"src": "15",
				"dest": "20"
			},
			{
				"src": "20",
				"dest": "14"
			},
			{
				"src": "15",
				"dest": "21"
			},
			{
				"src": "21",
				"dest": "14"
			},
			{
				"src": "14",
				"dest": "22"
			},
			{
				"src": "22",
				"dest": "13"
			},
			{
				"src": "12",
				"dest": "23"
			},
			{
				"src": "23",
				"dest": "14"
			},
			{
				"src": "28",
				"dest": "32"
			},
			{
				"src": "32",
				"dest": "25"
			},
			{
				"src": "27",
				"dest": "33"
			},
			{
				"src": "33",
				"dest": "28"
			},
			{
				"src": "25",
				"dest": "34"
			},
			{
				"src": "34",
				"dest": "30"
			},
			{
				"src": "30",
				"dest": "35"
			},
			{
				"src": "35",
				"dest": "30"
			},
			{
				"src": "31",
				"dest": "36"
			},
			{
				"src": "36",
				"dest": "24"
			},
			{
				"src": "29",
				"dest": "37"
			},
			{
				"src": "37",
				"dest": "27"
			},
			{
				"src": "28",
				"dest": "38"
			},
			{
				"src": "38",
				"dest": "26"
			},
			{
				"src": "24",
				"dest": "39"
			},
			{
				"src": "39",
				"dest": "24"
			},
			{
				"src": "26",
				"dest": "40"
			},
			{
				"src": "40",
				"dest": "31"
			},
			{
				"src": "30",
				"dest": "42"
			},
			{
				"src": "42",
				"dest": "41"
			},
			{
				"src": "14",
				"dest": "43"
			},
			{
				"src": "43",
				"dest": "41"
			},
			{
				"src": "30",
				"dest": "45"
			},
			{
				"src": "45",
				"dest": "44"
			},
			{
				"src": "12",
				"dest": "46"
			},
			{
				"src": "46",
				"dest": "44"
			},
			{
				"src": "30",
				"dest": "48"
			},
			{
				"src": "48",
				"dest": "47"
			},
			{
				"src": "13",
				"dest": "49"
			},
			{
				"src": "49",
				"dest": "47"
			},
			{
				"src": "30",
				"dest": "51"
			},
			{
				"src": "51",
				"dest": "50"
			},
			{
				"src": "15",
				"dest": "52"
			},
			{
				"src": "52",
				"dest": "50"
			},
			{
				"src": "41",
				"dest": "53"
			},
			{
				"src": "53",
				"dest": "47"
			},
			{
				"src": "44",
				"dest": "54"
			},
			{
				"src": "54",
				"dest": "50"
			},
			{
				"src": "50",
				"dest": "55"
			},
			{
				"src": "55",
				"dest": "41"
			},
			{
				"src": "50",
				"dest": "56"
			},
			{
				"src": "56",
				"dest": "41"
			},
			{
				"src": "47",
				"dest": "57"
			},
			{
				"src": "57",
				"dest": "44"
			},
			{
				"src": "44",
				"dest": "58"
			},
			{
				"src": "58",
				"dest": "41"
			},
			{
				"src": "44",
				"dest": "59"
			},
			{
				"src": "59",
				"dest": "47"
			},
			{
				"src": "50",
				"dest": "60"
			},
			{
				"src": "60",
				"dest": "41"
			}
		],
		"metamodels": [
			"/Formalisms/TrainDoor/TrainDoor",
			"/Formalisms/GenericGraph/GenericGraph",
			"/Formalisms/SCCD/SCCD"
		]
	}
}